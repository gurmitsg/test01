#!/usr/bin/env python

import sys
import optparse 
import re
import os
import subprocess
import socket
#import configobj
import ConfigParser 
from StringIO import StringIO


def listconfig():
    #config = ConfigParser.RawConfigParser() #config.read('/opt/tbs/cfg/onsolutions/onsolutions.properties')
    #print config.get('','securesms.mode')
    #config = configobj.ConfigObj('/opt/tbs/cfg/onsolutions/onsolutions.properties')
    #print config.get('securesms.mode')

    print "Encrpytion:" 
    print subprocess.check_output(['/usr/bin/openssl','x509','-in','/opt/tbs/cfg/pki/kamailio-calist.pem','-noout','-text','|grep sha1'])
    subprocess.check_output(['ls', '-l'])
    return True
    parser = ConfigParser.ConfigParser()
    cfg_onsol = '/opt/tbs/cfg/onsolutions/onsolutions.properties'
    with open(cfg_onsol) as stream:
        fakefile = StringIO("[top]\n" + stream.read())
        parser.readfp(fakefile)

def taillogs():
    logtuple = { 'tbs':'/var/log/tbs/tbs.log' }


def upd_config_file(filename,dico):

    RE = '(('+'|'.join(dico.keys())+')\s*=)[^\r\n]*?(\r?\n|\r)'
    pat = re.compile(RE)

    def jojo(mat,dic = dico ):
        return dic[mat.group(2)].join(mat.group(1,3))

    with open(filename,'rb') as f:
        content = f.read() 

    with open(filename,'wb') as f: f.write(pat.sub(jojo,content))


def upd_smsmode(smsmode):

    file_toupd = '/opt/tbs/cfg/onsolutions/onsolutions.properties'
    vars = ['securesms.mode']
    new_values = [smsmode]
    what_to_change = dict(zip(vars,new_values))
    upd_config_file(file_toupd,what_to_change)
    print "Updated config file: %s with new smsmode = %s" % (file_toupd,smsmode)


def valid_int_range(x,min,max):
    try:
        return ( int(x) >= min and int(x) <= max )
    except:
        return False 

def checkport_udp(port,ipaddr):
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    #s.bind((ipaddr,port))
    #s.sendto("--Testing--",0,(ipaddr,port))
    #data, addr = s.recvfrom(255)
    #print data, addr
    s.close()
    return "WIP"

def checkport_tcp(port,ipaddr):
    s1 = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    result1 = s1.connect_ex(('127.0.0.1', port))
    s2 = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    result2 = s2.connect_ex((ipaddr, port))
    s1.close()
    s2.close()

    if result1 == 0 or result2 == 0:
        return "OK"
    else:
        return "__NOT__ OK"

def controlsvc_output(svc,cmd,setup):
    if setup == "local":
        svc_script = '/etc/init.d/' + svc 
        p = subprocess.Popen([svc_script, cmd], stdout=subprocess.PIPE)
        out, err = p.communicate()
        print out
        #with open(os.devnull, 'wb') as devnull:
        #   subprocess.check_call([svc_script, cmd], stderr=subprocess.STDOUT)
    elif setup == "cluster":
        print "pcs status"

def controlsvc(svc,cmd,setup):
    if setup == "local":
        svc_script = '/etc/init.d/' + svc
        with open(os.devnull, 'wb') as devnull:
            subprocess.check_call([svc_script, cmd], stderr=subprocess.STDOUT)
            #subprocess.check_call([svc_script, cmd], stdout=devnull, stderr=subprocess.STDOUT)
    elif setup == "cluster":
        if cmd == "start":
            print "pcs resource enable",svc
        elif cmd == "stop":
            print "pcs resource disable",svc



def get_comma_separated_args(option, opt, value, parser):
    setattr(parser.values, option.dest, value.split(','))

def getargs(cmd,args):
    print '\nCMD       :', cmd
    print '\nARGs      :', args

    parser = optparse.OptionParser()

    if (cmd == "list"):
        parser.add_option('-a','--appserver',dest="appserver",default=False,action="store_true")
        options, remainder = parser.parse_args()
    elif (cmd == "config"):
        parser.add_option('-s','--smsmode',dest="smsmode")
        options, remainder = parser.parse_args()
        print 'SMSMODE      :', options.smsmode
    elif (cmd == "service"):
        parser.add_option('-u', '--up',dest="startlist",type='string',action='callback',
                          callback=get_comma_separated_args)
        parser.add_option('-d', '--down',dest="stoplist",type='string',action='callback',
                          callback=get_comma_separated_args)
        parser.add_option('-r', '--restart',dest="restartlist",type='string',action='callback',
                          callback=get_comma_separated_args)
        parser.add_option('-s', '--status',dest="statuslist",type='string',action='callback',
                          callback=get_comma_separated_args)
        options, remainder = parser.parse_args()
        print 'SERVICES Up:%s Down:%s Restart:%s Status:%s' % \
               (options.startlist,options.stoplist,options.restartlist,options.statuslist)
    elif (cmd == "verify"):
        parser.add_option('-p','--ports',dest="ports",default=False,action="store_true")
        options, remainder = parser.parse_args()
    elif (cmd == "help"):
        options, remainder = parser.parse_args()
        
    options.cmd = cmd
    return (options)

#-----------------------------------------------------------
def main():

    validcmds = ("list","config","service","verify","help")
    if len(sys.argv) == 1 or sys.argv[1] not in validcmds:
        print "Use valid commands ONLY: ", validcmds
        sys.exit(1)

    opts = getargs(sys.argv[1],sys.argv[2:])

    config = ConfigParser.ConfigParser()
    config.read('tbsctl.cfg')
    _systemtype = config.get('system','type');
    _systemsetup = config.get('system','setup');

    if (opts.cmd == "list"):
        print "\n*** List Config ***"
        listconfig()        

    elif (opts.cmd  == "config"):
        print "\n*** Modify Config ***"
        if opts.smsmode:
            print "\n*** Changing sms mode ***"
            if valid_int_range(opts.smsmode,0,2):
                upd_smsmode(opts.smsmode)
            else:
                print "Error: Invalid smsmode. Only 0/1/2 accepted"

    elif (opts.cmd == "verify"):
        print "\n*** Verify ***"
        if opts.ports:
            print "\n*** Checking ports ***";
            hostname = socket.gethostname()
            ipaddr = str(socket.gethostbyname(hostname))
            noport_svc = ('snoopy','woodstock')
            for svc in config.get(_systemtype,'services').split():
                if svc not in noport_svc:
                    print "==> TCP %s: " % svc
                    for port in config.get('ports:tcp',svc).split():
                        print "Port %s: " % port + checkport_tcp(int(port),ipaddr)
                
    elif (opts.cmd == "service"):
        print "\n*** Services ***"
        if opts.stoplist:
            print "\n*** Stopping services ***";
            if (opts.stoplist[0] == "all"):
                opts.stoplist = reversed(config.get(_systemtype,'services').split())
            for svc in opts.stoplist:
                controlsvc(svc,'stop',_systemsetup)
        if opts.startlist:
            print "\n*** Starting services ***";
            if (opts.startlist[0] == "all"):
                opts.startlist = config.get(_systemtype,'services').split()
            for svc in opts.startlist:
                controlsvc(svc,'start',_systemsetup)
        if opts.statuslist:
            print "\n*** Status of services ***";
            if (opts.statuslist[0] == "all"):
                opts.statuslist = config.get(_systemtype,'services').split()
            for svc in opts.statuslist:
                controlsvc_output(svc,'status',_systemsetup)

	
        

if __name__ == "__main__":
    main()


    sys.exit(0);

